import pandas as pd

# 데이터 입력 및 확인
data_real = pd.read_excel('./real_final_data2 (7).xlsx')
data = data_real.fillna("")
data['label'].unique()

# 필요 없는 행 및 index 최신화
data.sort_values('label',inplace=True)
data.reset_index(drop=True, inplace=True)
data.drop(columns=['Unnamed: 0'],inplace=True)

# label 정보 histogram으로 확인
import matplotlib 
import matplotlib.pyplot as plt
plt.hist(data['label'])

# data.grouby로 정보제공만 모음
data2 = data.groupby('label').get_group(2)
data4 = data2

# 세부 분류인 label2 에서 결측치를 -1로 대체
for i in range(len(data2['label'])):
    if data2['label2'][i+4516] == "":
        data3 = data2.drop(index=i+4516)
        data4['label2'][i+4516]=-1

# 필요 없는 행 삭제 및 데이터 확인
data.drop(columns=['predict_label','predict_label2','checked_question'],inplace=True)
data

# label2 에서 결측치를 -1로 처리한 data4를 data에 저장
data['label2'] = data4['label2']
data.fillna(-1,inplace=True)

# label2를 오름차순으로 정렬하고 index를 재지정 및 label2의 시작점 확인
data_real = data.sort_values('label2').reset_index(drop=True)
data_real # 마지막 index가 end

# label2에서 0으로 시작하는 지점의 index를 확인
data_real.groupby('label2').get_group(0) # 첫 시작 index가 start

# 학습을 위해 label2중에서 0~4의 데이터를 받아 data3에 저장
start = 11455
end = 12580+1
data3 = data_real.iloc[start:end]
data3

# label2의 값이 있는 채팅만 형태소 분석한 뒤 data_real에 저장
from konlpy.tag import Komoran
import re

data_real['V']= ''
data_real['N']= ''
data_real['M'] = ''
data_real['X'] = ''
data_real.fillna("",inplace=True)

class Preprocess:
    def __init__(self, userdic = None):
        self.komoran = Komoran(userdic=userdic)
        self.exclusion_tags = [
            'JKS','JKC', 'JKG', 'JKB', 'JKV', 'JKQ', 'JX', 'JC', 'SF', 'SP', 'SS', 'SE', 'SO', 'EP', 'EF', 'EC', 'ETN', 'ETM', 'XSN', 'XSV', 'XSA'
            ]
        
    def pos(self, sentence):
        return self.komoran.pos(sentence)
    
    def get_keywords(self, pos, without_tag = False):
        f = lambda x : x in self.exclusion_tags
        word_list = []
        for p in pos:
            if f(p[1]) is False:
                word_list.append(p if without_tag is False else p[0])
        return word_list

p = Preprocess(userdic='./user_dic.tsv')


m = re.compile("^N")
n = re.compile("^V")
o = re.compile("^X")

#len(data['question']

for i in range(end-start):
    sent = data_real['question'][i+start]
    pos = p.pos(sent)
    for k in range(len(pos)):
        if m.search(pos[k][1]) is not None: 
            data_real['N'][i+start] = data_real['N'][i+start]+" "+pos[k][0]
        elif n.search(pos[k][1]) is not None: 
            data_real['V'][i+start] = data_real['V'][i+start]+" "+pos[k][0]
        elif o.search(pos[k][1]) is not None: 
            data_real['X'][i+start] = data_real['X'][i+start]+" "+pos[k][0]
    print(i+1,"/",end-start)
            
data_real

# 전처리한 데이터를 엑셀에 저장
data_real.to_excel('data_for_chat.xlsx')
